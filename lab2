#lab2_postlab_5
import random

history = []

hedges = ("Please tell me more.",
          "Many of my patients tell me the same thing.",
          "Please continue.")

qualifiers = ("Why do you say that ",
              "You seem to think that ",
              "Can you explain why ")

replacements = {"I": "you", "me": "you", "my": "your",
                "we": "you", "us": "you", "mine": "yours",
                "you": "I", "your": "my", "yours": "mine"}


class Doctor:
    def __init__(self):
        pass

    #greeting message
    def greeting(self):
        return "Good morning, I hope you are doing good!.\nWhat can I do for you?"

    #fare well message
    def farewell(self):
        return "Have a nice day!"

    #reply strategies
    def reply(self, sentence):

        replyToPatientStrategy = random.randint(1, 5)
        if replyToPatientStrategy in (1, 2):
            # Just hedge
            answer = random.choice(hedges)
        elif replyToPatientStrategy == 3 and len(history) > 3:
            # Go back to an earlier topic
            answer = "Last time you said that " + \
                     changePerson(random.choice(history))
        else:
            # take the current input and struture a reply to patient
            answer = random.choice(qualifiers) + changePerson(sentence)

        history.append(sentence)
        return answer


#change the person / patient
def changePerson(sentence):
    words = sentence.split()
    replyWords = []
    for word in words:
        replyWords.append(replacements.get(word, word))
    return " ".join(replyWords)


# Manage Interaction between patient and doctor.

def main():
    doctor = Doctor()
    print(doctor.greeting())
    while True:
        sentence = input("\n>> ")
        if sentence.upper() == "QUIT":
            print(doctor.farewell())
            break
        print(doctor.reply(sentence))


# main
if __name__ == "__main__":
    main()

#lab2_postlab_6
from die import Die

class Player(object):

    def __init__(self):
        
        self.die1 = Die()
        self.die2 = Die()
        self.rolls = []
        self.rollscount = 0
        self.atStartup = True
        self.winner = False
        self.looser = False

    def __str__(self):
        
        result = ""
        for (v1, v2) in self.rolls:
            result = result + str((v1, v2)) + " " + \
                     str(v1 + v2) + "\n"
        return result

    def getNumberOfRolls(self):
        
        return len(self.rolls)

    def rollDice(self):
        # roll the dice q
        self.die1.roll()
        diefirst = self.die1.getValue()
        self.die2.roll()
        # roll the dice2
        diesecond = self.die2.getValue()
        res = (diefirst, diesecond)
        # update the roll count
        self.rollscount += 1
        self.rolls = []
        v1 = diefirst
        v2 = diesecond
        # append dies to the rolls
        self.rolls.append((v1, v2))
        # sum thereslu of the two dies
        initialSum = v1 + v2
        # check if sum is looser
        if initialSum in (2, 3, 12):
            self.looser = True
        elif initialSum in (7, 11):
            # check if sum is not looser
            # then set winner to true
            self.winner = True
        else:  # if sum is not in the both then
            # roll again the two dies
            while (True):
                self.die1.roll()
                self.die2.roll()
                (v1, v2) = (self.die1.getValue(),
                            self.die2.getValue())
                self.rolls.append((v1, v2))
                # find sum of the two dies
                laterSum = v1 + v2
                # check if sum is 7
                # then set looser to true
                if laterSum == 7:
                    self.looser = True
                    self.winner = False
                    break
                elif laterSum == initialSum:
                    # check if sum is initialSum
                    # then set winner to true
                    self.winner = True
                    self.looser = False
                    break
                
        return res

    def isWinner(self):
        # checking the varible if true the return true
        if self.winner is True:
            return True

    def isLooser(self):
        # checking the variable if true the return true
        if self.looser is True:
            return True

    def __str__(self):

        result = ""
        for (v1, v2) in self.rolls:
            result = result + str((v1, v2)) + " " + \
                     str(v1 + v2) + "\n"
        return result


def playOneGame(yourDice=None):
        player = Player()
    youWin = player.rollDice()
    print("yourDice result is: ", yourDice)
    youWin = player.isWinner()
    youLoose = player.isLooser()
    if youWin:
        print("You win!")
    if youLoose:
        print("You lose!")


def playManyGames(number):
    
    wins = 0
    losses = 0
    winRolls = 0
    lossRolls = 0
    player = Player()
    for count in range(number):
        dicenum = player.rollDice()
        print("your dice num is: ", dicenum)
        hasWon = player.isWinner()
        rolls = player.getNumberOfRolls()
        if hasWon:
            wins += 1
            winRolls += rolls
        else:
            losses += 1
            lossRolls += rolls
    print("The total number of wins is", wins)
    print("The total number of losses is", losses)
    print("The average number of rolls per win is %0.2f" % \
          (winRolls / wins))
    print("The average number of rolls per loss is %0.2f" % \
          (lossRolls / losses))
    print("The winning percentage is %0.3f" % (wins * 100 / number) + "%")


def main():
    
    number = int(input("Enter the number of games: "))
    playManyGames(number)


if __name__ == "__main__":
    main()


from random import randint


class Die:
    

    def __init__(self):
        
        self.value = 1

    def roll(self):
        
        self.value = randint(1, 6)

    def getValue(self):
        
        return self.value

    def __str__(self):
        
        return str(self.getValue())


from die import Die

class Player(object):

    def __init__(self):
        
        self.die1 = Die()
        self.die2 = Die()
        self.rolls = []
        self.rollscount=0
        self.atStartup=True
        self.winner=False
        self.looser=False

    def __str__(self):
        
        result = ""
        for (v1, v2) in self.rolls:
            result = result + str((v1, v2)) + " " +\
                     str(v1 + v2) + "\n"
        return result

    def getNumberOfRolls(self):
                return len(self.rolls)

    def rollDice(self):
        #roll the dice q
        self.die1.roll()
        diefirst=self.die1.getValue()
        self.die2.roll()
        #roll the dice2
        diesecond=self.die2.getValue()
        res=(diefirst,diesecond)
        #update the roll count
        self.rollscount+=1
                self.rolls = []
        v1=diefirst
        v2=diesecond
        #append dies to the rolls
        self.rolls.append((v1, v2))
        #sum thereslu of the two dies
        initialSum = v1 + v2
        #check if sum is looser
        if initialSum in (2, 3, 12):
            self.looser=True
        elif initialSum in (7, 11):
            #check if sum is not looser
            #then set winner to true
            self.winner=True
        else:#if sum is not in the both then
            #roll again the two dies
          while (True):
              self.die1.roll()
              self.die2.roll()
              (v1, v2) = (self.die1.getValue(),
              self.die2.getValue())
              self.rolls.append((v1, v2))
              #find sum of the two dies
              laterSum = v1 + v2
              #check if sum is 7
              #then set looser to true
              if laterSum == 7:
                  self.looser= True
                  self.winner=False
                  break
              elif laterSum == initialSum:
                   #check if sum is initialSum
                  #then set winner to true
                  self.winner= True
                  self.looser=False
                  break
              
        return res

    def isWinner(self):
        #checking the varible if true the return true
        if self.winner is True:
            return True

    def isLooser(self):
        #checking the varible if true the return true
        if self.looser is True:
            return True

    def __str__(self):
        
        result = ""
        for (v1, v2) in self.rolls:
            result = result + str((v1, v2)) + " " +\
            str(v1 + v2) + "\n"
        return result

def playOneGame(yourDice=None):
       player = Player()
    youWin = player.rollDice()
    print("yourDice result is: ",yourDice)
    youWin = player.isWinner()
    youLoose=player.isLooser()
    if youWin:
        print("You win!")
    if youLoose:
        print("You lose!")

def playManyGames(number):
     wins = 0
    losses = 0
    winRolls = 0
    lossRolls = 0
    player = Player()
    for count in range(number):
        dicenum = player.rollDice()
        print("your dice num is: ",dicenum)
        hasWon = player.isWinner()
        rolls = player.getNumberOfRolls()
        if hasWon:
            wins += 1
            winRolls += rolls
        else:
            losses += 1
            lossRolls += rolls
    print("The total number of wins is", wins)
    print("The total number of losses is", losses)
    print("The average number of rolls per win is %0.2f" % \
          (winRolls / wins))
    print("The average number of rolls per loss is %0.2f" % \
          (lossRolls / losses))
    print("The winning percentage is %0.3f" % (wins*100 / number)+"%")

def main():
    
    number = int(input("Enter the number of games: "))
    playManyGames(number)

if __name__ == "__main__":
    main()


from random import randint

class Die:
    
    def __init__(self):
        
        self.value = 1

    def roll(self):
        self.value = randint(1, 6)

    def getValue(self):
        
        return self.value

    def __str__(self):
        
        return str(self.getValue())


